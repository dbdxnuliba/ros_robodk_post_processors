#!/usr/bin/env python

import sys
import os
# FIXME Hard-coded path
sys.path.append(os.path.abspath("/home/victor/code/catkin_workspace/src/robodk_postprocessors/"))

import actionlib
from Motoman import *
from ros_robodk_post_processors.srv import *
import rospy

def generate_native_code_program(req):
  robot = RobotPost('Motomantest', 'Motoman robot', 6)
  robot.PROG_COMMENT = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQR"
  robot.ProgStart("Program")
  robot.RunMessage("Program generated by Robot Operating System using RoboDK post processors", True)
  #robot.setFrame(Pose([807.766544, -963.699898, 41.478944, 0, 0, 0]), None, 0)
  #robot.setTool(Pose([62.5, -108.253175, 100, -60, 90, 0]), None, 0)
  robot.MoveJ(Pose([200, 200, 500, 180, 0, 180]), [-46.18419, -6.77518, -20.54925, 71.38674, 49.58727, -302.54752] )
  robot.MoveL(Pose([200, 250, 348.734575, 180, 0, -150]), [-41.62707, -8.89064, -30.01809, 60.62329, 49.66749, -258.98418] )
  robot.MoveL(Pose([200, 200, 262.132034, 180, 0, -150]), [-43.73892, -3.91728, -35.77935, 58.57566, 54.11615, -253.81122] )
  robot.Pause(1000)
  robot.MoveL(Pose([200, 250, 348.734575, 180, 0, -150]), [-41.62707, -8.89064, -30.01809, 60.62329, 49.66749, -258.98418] )
  robot.MoveL(Pose([250, 300, 278.023897, 180, 0, -150]), [-37.52588, -6.32628, -34.59693, 53.52525, 49.24426, -251.44677] )
  robot.MoveL(Pose([250, 250, 191.421356, 180, 0, -150]), [-39.75778, -1.04537, -40.37883, 52.09118, 54.15317, -246.94403] )
  robot.Pause(1000)
  robot.MoveL(Pose([250, 300, 278.023897, 180, 0, -150]), [-37.52588, -6.32628, -34.59693, 53.52525, 49.24426, -251.44677] )
  robot.MoveL(Pose([250, 200, 278.023897, 180, 0, -150]), [-41.85389, -1.95619, -34.89154, 57.43912, 52.34162, -253.73403] )
  robot.MoveL(Pose([250, 150, 191.421356, 180, 0, -150]), [-43.82111, 3.29703, -40.29493, 56.02402, 56.61169, -249.23532] )
  robot.ProgFinish("Program")

  robot.PROG = robot.PROG_LIST.pop()
  program=''
  for line in robot.PROG:
    print(line)
    program += line

  if len(robot.LOG) > 0:
    mbox('Program generation LOG:\n\n' + robot.LOG)
    # FIXME Handle errors

  return [program]

def service_server():
  rospy.init_node('ros_robodk_post_processors')
  s = rospy.Service('generate_native_code_program', GenerateNativeCodeProgram, generate_native_code_program)
  print("Service %s ready" % s.resolved_name)
  rospy.spin()

if __name__ == '__main__':
  service_server()
